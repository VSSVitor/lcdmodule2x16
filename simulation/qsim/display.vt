// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2018 17:15:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lcd_example
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lcd_example_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lcd_example_vlg_check_tst (
	e,
	lcd_blon,
	lcd_data,
	lcd_on,
	ledr,
	rs,
	rw,
	sampler_rx
);
input  e;
input  lcd_blon;
input [7:0] lcd_data;
input  lcd_on;
input  ledr;
input  rs;
input  rw;
input sampler_rx;

reg  e_expected;
reg  lcd_blon_expected;
reg [7:0] lcd_data_expected;
reg  lcd_on_expected;
reg  ledr_expected;
reg  rs_expected;
reg  rw_expected;

reg  e_prev;
reg  lcd_blon_prev;
reg [7:0] lcd_data_prev;
reg  lcd_on_prev;
reg  ledr_prev;
reg  rs_prev;
reg  rw_prev;

reg  e_expected_prev;
reg  lcd_blon_expected_prev;
reg [7:0] lcd_data_expected_prev;
reg  lcd_on_expected_prev;
reg  ledr_expected_prev;
reg  rs_expected_prev;
reg  rw_expected_prev;

reg  last_e_exp;
reg  last_lcd_blon_exp;
reg [7:0] last_lcd_data_exp;
reg  last_lcd_on_exp;
reg  last_ledr_exp;
reg  last_rs_exp;
reg  last_rw_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	e_prev = e;
	lcd_blon_prev = lcd_blon;
	lcd_data_prev = lcd_data;
	lcd_on_prev = lcd_on;
	ledr_prev = ledr;
	rs_prev = rs;
	rw_prev = rw;
end

// update expected /o prevs

always @(trigger)
begin
	e_expected_prev = e_expected;
	lcd_blon_expected_prev = lcd_blon_expected;
	lcd_data_expected_prev = lcd_data_expected;
	lcd_on_expected_prev = lcd_on_expected;
	ledr_expected_prev = ledr_expected;
	rs_expected_prev = rs_expected;
	rw_expected_prev = rw_expected;
end



// expected e
initial
begin
	e_expected = 1'bX;
	e_expected = #999000 1'b0;
end 

// expected lcd_blon
initial
begin
	lcd_blon_expected = 1'bX;
	lcd_blon_expected = #999000 1'b0;
end 
// expected lcd_data[ 7 ]
initial
begin
	lcd_data_expected[7] = 1'bX;
	lcd_data_expected[7] = #999000 1'b0;
end 
// expected lcd_data[ 6 ]
initial
begin
	lcd_data_expected[6] = 1'bX;
	lcd_data_expected[6] = #999000 1'b0;
end 
// expected lcd_data[ 5 ]
initial
begin
	lcd_data_expected[5] = 1'bX;
	lcd_data_expected[5] = #999000 1'b0;
end 
// expected lcd_data[ 4 ]
initial
begin
	lcd_data_expected[4] = 1'bX;
	lcd_data_expected[4] = #999000 1'b0;
end 
// expected lcd_data[ 3 ]
initial
begin
	lcd_data_expected[3] = 1'bX;
	lcd_data_expected[3] = #999000 1'b0;
end 
// expected lcd_data[ 2 ]
initial
begin
	lcd_data_expected[2] = 1'bX;
	lcd_data_expected[2] = #999000 1'b0;
end 
// expected lcd_data[ 1 ]
initial
begin
	lcd_data_expected[1] = 1'bX;
	lcd_data_expected[1] = #999000 1'b0;
end 
// expected lcd_data[ 0 ]
initial
begin
	lcd_data_expected[0] = 1'bX;
	lcd_data_expected[0] = #999000 1'b0;
end 

// expected lcd_on
initial
begin
	lcd_on_expected = 1'bX;
	lcd_on_expected = #999000 1'b0;
end 

// expected ledr
initial
begin
	ledr_expected = 1'bX;
	ledr_expected = #999000 1'b0;
end 

// expected rs
initial
begin
	rs_expected = 1'bX;
	rs_expected = #999000 1'b0;
end 

// expected rw
initial
begin
	rw_expected = 1'bX;
	rw_expected = #999000 1'b0;
end 
// generate trigger
always @(e_expected or e or lcd_blon_expected or lcd_blon or lcd_data_expected or lcd_data or lcd_on_expected or lcd_on or ledr_expected or ledr or rs_expected or rs or rw_expected or rw)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected e = %b | expected lcd_blon = %b | expected lcd_data = %b | expected lcd_on = %b | expected ledr = %b | expected rs = %b | expected rw = %b | ",e_expected_prev,lcd_blon_expected_prev,lcd_data_expected_prev,lcd_on_expected_prev,ledr_expected_prev,rs_expected_prev,rw_expected_prev);
	$display("| real e = %b | real lcd_blon = %b | real lcd_data = %b | real lcd_on = %b | real ledr = %b | real rs = %b | real rw = %b | ",e_prev,lcd_blon_prev,lcd_data_prev,lcd_on_prev,ledr_prev,rs_prev,rw_prev);
`endif
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( lcd_blon_expected_prev !== 1'bx ) && ( lcd_blon_prev !== lcd_blon_expected_prev )
		&& ((lcd_blon_expected_prev !== last_lcd_blon_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_blon :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_blon_expected_prev);
		$display ("     Real value = %b", lcd_blon_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_blon_exp = lcd_blon_expected_prev;
	end
	if (
		( lcd_data_expected_prev[0] !== 1'bx ) && ( lcd_data_prev[0] !== lcd_data_expected_prev[0] )
		&& ((lcd_data_expected_prev[0] !== last_lcd_data_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[0] = lcd_data_expected_prev[0];
	end
	if (
		( lcd_data_expected_prev[1] !== 1'bx ) && ( lcd_data_prev[1] !== lcd_data_expected_prev[1] )
		&& ((lcd_data_expected_prev[1] !== last_lcd_data_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[1] = lcd_data_expected_prev[1];
	end
	if (
		( lcd_data_expected_prev[2] !== 1'bx ) && ( lcd_data_prev[2] !== lcd_data_expected_prev[2] )
		&& ((lcd_data_expected_prev[2] !== last_lcd_data_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[2] = lcd_data_expected_prev[2];
	end
	if (
		( lcd_data_expected_prev[3] !== 1'bx ) && ( lcd_data_prev[3] !== lcd_data_expected_prev[3] )
		&& ((lcd_data_expected_prev[3] !== last_lcd_data_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[3] = lcd_data_expected_prev[3];
	end
	if (
		( lcd_data_expected_prev[4] !== 1'bx ) && ( lcd_data_prev[4] !== lcd_data_expected_prev[4] )
		&& ((lcd_data_expected_prev[4] !== last_lcd_data_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[4] = lcd_data_expected_prev[4];
	end
	if (
		( lcd_data_expected_prev[5] !== 1'bx ) && ( lcd_data_prev[5] !== lcd_data_expected_prev[5] )
		&& ((lcd_data_expected_prev[5] !== last_lcd_data_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[5] = lcd_data_expected_prev[5];
	end
	if (
		( lcd_data_expected_prev[6] !== 1'bx ) && ( lcd_data_prev[6] !== lcd_data_expected_prev[6] )
		&& ((lcd_data_expected_prev[6] !== last_lcd_data_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[6] = lcd_data_expected_prev[6];
	end
	if (
		( lcd_data_expected_prev[7] !== 1'bx ) && ( lcd_data_prev[7] !== lcd_data_expected_prev[7] )
		&& ((lcd_data_expected_prev[7] !== last_lcd_data_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_data_exp[7] = lcd_data_expected_prev[7];
	end
	if (
		( lcd_on_expected_prev !== 1'bx ) && ( lcd_on_prev !== lcd_on_expected_prev )
		&& ((lcd_on_expected_prev !== last_lcd_on_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_on :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_on_expected_prev);
		$display ("     Real value = %b", lcd_on_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_lcd_on_exp = lcd_on_expected_prev;
	end
	if (
		( ledr_expected_prev !== 1'bx ) && ( ledr_prev !== ledr_expected_prev )
		&& ((ledr_expected_prev !== last_ledr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ledr_exp = ledr_expected_prev;
	end
	if (
		( rs_expected_prev !== 1'bx ) && ( rs_prev !== rs_expected_prev )
		&& ((rs_expected_prev !== last_rs_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs_expected_prev);
		$display ("     Real value = %b", rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_rs_exp = rs_expected_prev;
	end
	if (
		( rw_expected_prev !== 1'bx ) && ( rw_prev !== rw_expected_prev )
		&& ((rw_expected_prev !== last_rw_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rw :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rw_expected_prev);
		$display ("     Real value = %b", rw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_rw_exp = rw_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lcd_example_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire e;
wire lcd_blon;
wire [7:0] lcd_data;
wire lcd_on;
wire ledr;
wire rs;
wire rw;

wire sampler;                             

// assign statements (if any)                          
lcd_example i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.e(e),
	.lcd_blon(lcd_blon),
	.lcd_data(lcd_data),
	.lcd_on(lcd_on),
	.ledr(ledr),
	.reset(reset),
	.rs(rs),
	.rw(rw)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

lcd_example_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

lcd_example_vlg_check_tst tb_out(
	.e(e),
	.lcd_blon(lcd_blon),
	.lcd_data(lcd_data),
	.lcd_on(lcd_on),
	.ledr(ledr),
	.rs(rs),
	.rw(rw),
	.sampler_rx(sampler)
);
endmodule

